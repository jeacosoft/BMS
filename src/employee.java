/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Image;
import java.awt.Toolkit;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author AnthonyCee
 */
public class employee extends javax.swing.JInternalFrame {
Connection con = myconnect.getConnection();
  //Connection con = myconnect2.ConnectDb();
        PreparedStatement ps;
        ResultSet rs;
         int num1, num2,num3, num4,num5, num6;
        String q1,q2,q3,q4,q5,q6,m4;
    /**
     * Creates new form employee
     */
    public employee() {
        initComponents();
         fetch();
     dob.setDate(java.sql.Date.valueOf(java.time.LocalDate.now()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        staff = new javax.swing.JRadioButton();
        cstaff = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tblemployee = new javax.swing.JTable();
        others = new javax.swing.JRadioButton();
        paspt = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        code = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        username = new javax.swing.JTextField();
        btnDel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnPaspt = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        Btnclear = new javax.swing.JButton();
        name = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        EmailId = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        mobile = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        dob = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        sex = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        activeness = new javax.swing.JCheckBox();
        admin = new javax.swing.JRadioButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("EMPLOYEE'S DETAILS");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/sunlog.png"))); // NOI18N

        staff.setText("Staff");

        cstaff.setText("Contract Staff");

        Tblemployee.getTableHeader().setReorderingAllowed(false);
        Tblemployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TblemployeeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tblemployee);

        others.setText("Others");

        paspt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        paspt.setText("Passport");
        paspt.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel1.setText("Emp.Code");

        btnSubmit.setText("Submit");
        btnSubmit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSubmitMouseEntered(evt);
            }
        });
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        code.setEnabled(false);

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });

        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        jLabel2.setText("Username");

        btnPaspt.setText(" PassPort");
        btnPaspt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasptActionPerformed(evt);
            }
        });

        jLabel3.setText("Password");

        Btnclear.setText("Clear");
        Btnclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnclearActionPerformed(evt);
            }
        });

        password.setEnabled(false);

        jLabel4.setText("Name");

        jLabel5.setText("Email ID");

        mobile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobileActionPerformed(evt);
            }
        });

        jLabel6.setText("Mobile NO");

        jLabel7.setText("Date of Birth");

        sex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Sex", "Male", "Female" }));

        jLabel8.setText("Sex");

        jLabel9.setText("Emp. Type");

        activeness.setText("Employee's Activeness");
        activeness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activenessActionPerformed(evt);
            }
        });

        admin.setText("Admin");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(activeness)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(50, 50, 50))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sex, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dob, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(386, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addGap(40, 40, 40))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel9)
                                            .addGap(26, 26, 26)))
                                    .addComponent(admin)
                                    .addGap(18, 18, 18)
                                    .addComponent(staff)
                                    .addGap(21, 21, 21)
                                    .addComponent(cstaff)
                                    .addGap(12, 12, 12)
                                    .addComponent(others)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(18, 18, 18)
                                    .addComponent(code, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel2)
                                    .addGap(18, 18, 18)
                                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6))))
                            .addGap(35, 35, 35)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(mobile, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                                    .addComponent(EmailId)
                                    .addComponent(password))
                                .addComponent(paspt, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(98, 98, 98)
                            .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnPaspt, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(36, 36, 36)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(Btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dob, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(sex, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(68, 68, 68)
                .addComponent(activeness)
                .addContainerGap(223, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(EmailId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(mobile, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6)))
                        .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(code, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(33, 33, 33)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(69, 69, 69)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(admin)
                                .addComponent(staff)
                                .addComponent(cstaff)
                                .addComponent(others))
                            .addGap(42, 42, 42))
                        .addComponent(paspt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPaspt, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
     public void fetch(){
    
      
        try {
              String q = "select `EmpCode`, `Name`, `Sex`, `PhoneNo`, `EmailID`, `DOB`,  `EmpType`, `EmployeeActiveness`,Username,Password from register";
            ps = con.prepareStatement(q);
             rs = ps.executeQuery();
             
            Tblemployee.setModel(DbUtils.resultSetToTableModel(rs)); 
             
        } catch (SQLException ex) {
            
            Logger.getLogger(employee.class.getName()).log(Level.SEVERE, null, ex);
        }
    
     
       
   } 
  
    private void TblemployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TblemployeeMouseClicked
        try{
            // TODO add your handling code here:
            int i =   Tblemployee.getSelectedRow();
            TableModel model =   Tblemployee.getModel();
            // txtid.setText(model.getValueAt(i,0).toString());
            name.setText(model.getValueAt(i,1).toString());
            sex.setSelectedItem(model.getValueAt(i,2).toString());
            mobile.setText(model.getValueAt(i,3).toString());
            EmailId.setText(model.getValueAt(i,4).toString());

            code.setText(model.getValueAt(i,0).toString());
            //dob.setd(mo
                String Emptype = (model.getValueAt(i,6).toString());
                switch(Emptype){
                    case "Admin":
                    admin.setSelected(true);
                    break;
                    case "Staff":
                    staff.setSelected(true);
                    break;
                    case "Contract Staff":
                    cstaff.setSelected(true);
                    break;
                    case "Others":
                    others.setSelected(true);

                    default:
                    break;

                }
                String Active = (model.getValueAt(i,7).toString());
                if(Active.equals("Active")){

                    activeness.setSelected(true);}else
                {activeness.setSelected(false);}

                // username.setText(model.getValueAt(i,9).toString());
                //password.setText(model.getValueAt(i,10).toString());
                // if (activeness.setAction(active))
                //paspt.getIcon((model.getValueAt(i,4).toString());

                    String sql = "select DOB from register where EmpCode = '"+code.getText()+"'";

                    try {
                        ps = con.prepareStatement(sql);
                        rs = ps.executeQuery();
                        if (rs.next()){
                            String date = rs.getString("DOB");
                            ( (JTextField)dob.getDateEditor().getUiComponent()).setText(date);

                        }

                        try{

                            ps= con.prepareStatement("select Passport from register where  EmpCode = '"+code.getText()+"'");
                            rs=ps.executeQuery();

                            byte[] img = null;
                            if (rs.next()) {
                                img =  rs.getBytes("Passport");
                                ImageIcon image = new ImageIcon(img);
                                Image im = image.getImage();
                                Image myImg = im.getScaledInstance(   paspt.getWidth(),   paspt.getHeight(),Image.SCALE_SMOOTH);
                                ImageIcon newImage = new ImageIcon(myImg);

                                paspt.setIcon(newImage);
                                //lPhoto.setIcon(icon);
                                //add(lPhoto);

                            }

                        }catch(Exception ex){}

                    } catch (SQLException ex) {
                        Logger.getLogger(employee.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }catch (Exception ex){}

    }//GEN-LAST:event_TblemployeeMouseClicked

    private void btnSubmitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSubmitMouseEntered
        // TODO add your handling code here:
        code.setText(q2= "OBN");
        password.setText(q1= "");
    }//GEN-LAST:event_btnSubmitMouseEntered

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        //automatic pin generator
        num1 =  1+ (int)(Math.random() * 100000009 );
        q1 += num1;
        password.setText(q1);

        //Employer code

        num2 =  1+ (int)(Math.random() * 1000009 );
        q2 += num2;
        code.setText(q2);

        //coversion of the radio and check box

        String emptype = null;
        if(admin.isSelected()== true){
            emptype = "Admin";
        }

        else if(staff.isSelected()== true){
            emptype = "Staff";

        }
        else  if(cstaff.isSelected()== true){
            emptype = "Contract Staff";
        }
        else if(others.isSelected()== true){
            emptype = "Others";
        }else{
            emptype = "Unknown";}

        String active = null;

        if(activeness.isSelected()== true){

            active = "Active";

        }else
        { active ="Not Active";
        }
        int Conf = JOptionPane.showConfirmDialog(this, "Are you sure you want save this Record?", "Comfirmation",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if(name.getText().equals("") ||sex.getSelectedItem().equals("Select Sex")||mobile.getText().equals("") ||EmailId .getText().equals("") || dob.getDateEditor().equals("") ||
            code.getText().equals("")){

            JOptionPane.showMessageDialog(this,"Some Field are not filled, Fill them up to continue");

        }
        else if (paspt.getIcon()== null){
            JOptionPane.showMessageDialog(this,"NO Image Selected");
        }else{
            //checking if username exist in the database or not
            try {
                String user = "select COUNT(*) AS total from register where Username = ? ";
                ps = con.prepareStatement(user);
                ps.setString(1, username.getText());
                // ps.setString(1, pin.getText());

                rs = ps.executeQuery();
                while(rs.next()){

                    if(rs.getInt("total")>0){
                        JOptionPane.showMessageDialog(this,"This Username already exist in the database");
                    }else
                    try {
                        // SUBMITING OR INSERTING
                        String date = ((JTextField)dob.getDateEditor().getUiComponent()).getText();
                        String qry = "INSERT INTO `register`( `Name`, `Sex`, `PhoneNo`, `EmailID`, `DOB`, `EmpCode`, `EmpType`, `EmployeeActiveness`, `Username`, `Password`, `Passport`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
                        ps = con.prepareStatement(qry);
                        ps.setString(1, name.getText());
                        ps.setString(2, sex.getSelectedItem().toString());
                        ps.setString(3, mobile.getText());
                        ps.setString(4, EmailId.getText());
                        ps.setString(5, date);
                        ps.setString(6, code.getText());
                        ps.setString(7, emptype);
                        ps.setString(8, active);

                        ps.setString(9, username.getText());
                        ps.setString(10,String.valueOf(password.getPassword()));
                        ps.setBytes(11, photo);
                        //confirmation before saving
                        if(Conf == JOptionPane.YES_OPTION){
                            int n1 = ps.executeUpdate();
                            if (n1>0){
                                JOptionPane.showMessageDialog(null, "Record was Submitted Sucessfully");
                                fetch();
                            }
                        }else{}
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Record  Submission failed,\nthis could be caused by oversized image, \nmake sure the image is not more than 1MB");
                        Logger.getLogger(employee.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }           } catch (SQLException ex) {
                    Logger.getLogger(employee.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        String emptype = null;
        if(admin.isSelected()== true){
            emptype = "Admin";
        }

        else if(staff.isSelected()== true){
            emptype = "Staff";

        }
        else  if(cstaff.isSelected()== true){
            emptype = "Contract Staff";
        }
        else if(others.isSelected()== true){
            emptype = "Others";
        }else{
            emptype = "Unknown";}

        String active = null;

        if(activeness.isSelected()== true){

            active = "Active";

        }else
        { active ="Not Active";
        }
        int res = JOptionPane.showConfirmDialog(this, "Are you sure you want Modify this Record?", "Comfirmation",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        String value1 = name.getText();
        String value2 = sex.getSelectedItem().toString();
        String value3 = mobile.getText();
        String value4 = EmailId.getText();
        String value5 = code.getText();
       

        // SUBMITING OR INSERTING
        String date = ((JTextField)dob.getDateEditor().getUiComponent()).getText();
        if(value1.equals("") || value2.equals("") || value3.equals("")|| value4.equals("")||value5.equals("")|| dob.getDate().equals(""))
        {
            JOptionPane.showMessageDialog(this," Some field are missing,please fill them to continue" );

        }

        else if (paspt.getIcon()==null){
            JOptionPane.showMessageDialog(this," No Image Selected" );
        }else{

            try {
                // TODO add your handling code here:
                String qry = "UPDATE `register` SET Name = ?,`Sex`=?,`PhoneNo`=?,`EmailID`= ?,`DOB`= ?,`EmpType`=?,`EmployeeActiveness`= ?,Passport =?  WHERE `EmpCode`=? ";
                               
                ps = con.prepareStatement(qry);
                 ps.setString(1, value1);
          ps.setString(2, value2);
           ps.setString(3, value3);
            ps.setString(4, value4);
              ps.setString(5, date);
               ps.setString(6, emptype);
                ps.setString(7,active  );
                     ps.setBytes(8, photo);
                       ps.setString(9, value5);  
           

                // ps.setString(9, username.getText());
                //ps.setString(10,String.valueOf(password.getPassword()));
                // ps.setBytes(11, photo);
                if(res==JOptionPane.YES_OPTION){
                    int n1 = ps.executeUpdate();
                    if (n1>0){
                        JOptionPane.showMessageDialog(null, "Record was Update Sucessfully");
                        fetch();
                    }
                }else{}

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Record Update failed,\nthis could be caused by oversized image, \nmake sure the image is not more than 1MB");
                Logger.getLogger(employee.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_btnUpdateActionPerformed
    }
    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        //delect from table

        int conf = JOptionPane.showConfirmDialog(this, "Are you Sure you want to delete this Record, Record will be deleted permanently from or database, click Yes to continue", "Warning",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        try {
            ps = con.prepareStatement("DELETE FROM register  WHERE EmpCode = '"+ code.getText() +"'");
            if(conf == JOptionPane.YES_OPTION){
                int n1 =  ps.executeUpdate();
                if (n1>0){

                    JOptionPane.showMessageDialog(null, "Deleted Successful");
                    fetch();
                }
            }else{}

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Delete not Successful");
            Logger.getLogger(employee.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnDelActionPerformed
//resizing the uploaded image
    public ImageIcon ResizeImage(String ImagePath){
ImageIcon Myimage = new ImageIcon(ImagePath);
Image img = Myimage.getImage();
Image newImg = img.getScaledInstance(paspt.getWidth(),paspt.getHeight() ,Image.SCALE_SMOOTH);
ImageIcon image = new ImageIcon(newImg);
return image;



}
    private void btnPasptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasptActionPerformed
        // TODO add your handling code here:

        // uploading picture
        
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File (System.getProperty("user.home")));
            FileNameExtensionFilter filter = new FileNameExtensionFilter("* .images", "jpg","gif","png");
            chooser.addChoosableFileFilter(filter);
            int result = chooser.showSaveDialog(null);
            if(result ==JFileChooser.APPROVE_OPTION){
            
            File f = chooser.getSelectedFile();
            filename = f.getAbsolutePath();
            
               
         paspt.setIcon(ResizeImage(filename));
           
            
            }else if (result == JFileChooser.CANCEL_OPTION){
            System.out.println("No image selected");}
            
            
            try{
                File image =new File (filename);
                FileInputStream fis = new FileInputStream(image);
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                byte [] buf = new byte [1024];
                for (int readNum; (readNum = fis.read(buf))!= -1;){
                    bos.write(buf,0,readNum);

                }
                //the photo is declared as global variable at the botton page
                photo = bos.toByteArray();
            

            }catch (Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
    }//GEN-LAST:event_btnPasptActionPerformed

    private void BtnclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnclearActionPerformed
        // Clear

        others.isSelected();
       
        name.setText(null);
        sex.setSelectedItem("");
        mobile.setText("");
        EmailId.setText(null);
        //dob.setd(model.getValueAt(i,5));
        paspt.setIcon(null);
        code.setText("");
        activeness.isSelected();
        username.setText("");
        password.setText("");
    }//GEN-LAST:event_BtnclearActionPerformed

    private void mobileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mobileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mobileActionPerformed

    private void activenessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activenessActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_activenessActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btnclear;
    private javax.swing.JTextField EmailId;
    private javax.swing.JTable Tblemployee;
    private javax.swing.JCheckBox activeness;
    private javax.swing.JRadioButton admin;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnPaspt;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JTextField code;
    private javax.swing.JRadioButton cstaff;
    private com.toedter.calendar.JDateChooser dob;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mobile;
    private javax.swing.JTextField name;
    private javax.swing.JRadioButton others;
    private javax.swing.JLabel paspt;
    private javax.swing.JPasswordField password;
    private javax.swing.JComboBox<String> sex;
    private javax.swing.JRadioButton staff;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
byte [] photo = null;
String filename = null;

}
