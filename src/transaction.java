/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Image;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
/**
 *
 * @author AnthonyCee
 */
public class transaction extends javax.swing.JInternalFrame {
Connection con = myconnect.getConnection();
     // Connection con = myconnect2.ConnectDb();
        PreparedStatement ps;
        ResultSet rs;
        
        int ref;
        String q;
    /**
     * Creates new form transaction
     */
    public transaction() {
        initComponents();
         transdate.setDate(java.sql.Date.valueOf(java.time.LocalDate.now()));
    }

    
     public void refresh(){
    
    try {
        String sql = "select * from customertable where AccountNO = ?";
        ps = con.prepareStatement(sql);
        ps.setString(1, txtsearch.getText());
        rs = ps.executeQuery();
        
        if (rs.next()){
            String Add1 = rs.getString("AccountBalance");
        txtbal.setText(Add1);
        }
    } catch (SQLException ex) {
        Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
    }
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnsearch = new javax.swing.JButton();
        txtsearch = new javax.swing.JTextField();
        trantype = new javax.swing.JComboBox<>();
        btnsub = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtcid = new javax.swing.JTextField();
        txtstatus = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtacctype = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtbal = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        amt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        remark = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btncan = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txttailerno = new javax.swing.JTextField();
        transdate = new com.toedter.calendar.JDateChooser();
        passp = new javax.swing.JLabel();
        time = new javax.swing.JLabel();
        refno = new javax.swing.JLabel();
        signature = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("TRANSACTION MASTER");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/sunlog.png"))); // NOI18N

        jLabel1.setText("Account No");

        btnsearch.setText("Search");
        btnsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchActionPerformed(evt);
            }
        });

        txtsearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtsearchFocusGained(evt);
            }
        });
        txtsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtsearchKeyReleased(evt);
            }
        });

        trantype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Transaction", "Deposit", "Withdrawal" }));
        trantype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trantypeActionPerformed(evt);
            }
        });

        btnsub.setText("Submit");
        btnsub.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnsub.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnsubMouseEntered(evt);
            }
        });
        btnsub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsubActionPerformed(evt);
            }
        });

        jLabel2.setText("Customer ID");

        txtcid.setEnabled(false);

        txtstatus.setEnabled(false);

        jLabel3.setText("Account Status");

        txtname.setEnabled(false);

        jLabel4.setText("Customer Name");

        txtacctype.setEnabled(false);

        jLabel5.setText("Account type");

        txtbal.setEnabled(false);

        jLabel6.setText("Account Balance");

        jLabel7.setText("Transaction Type");

        amt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                amtFocusGained(evt);
            }
        });
        amt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amtKeyReleased(evt);
            }
        });

        jLabel8.setText("Amount");

        remark.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                remarkFocusGained(evt);
            }
        });

        jLabel9.setText("Remark");

        btncan.setText("Cancel");
        btncan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btncan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncanActionPerformed(evt);
            }
        });

        jLabel10.setText("Tailler No");

        jLabel11.setText("Date");

        txttailerno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txttailernoFocusGained(evt);
            }
        });

        passp.setBorder(new javax.swing.border.MatteBorder(null));

        time.setText("Ref No :");

        refno.setFont(new java.awt.Font("Square721 BT", 1, 14)); // NOI18N

        signature.setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(51, 51, 51)
                        .addComponent(remark))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtsearch)
                        .addGap(18, 18, 18)
                        .addComponent(btnsearch))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(jLabel8)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(txtbal, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(trantype, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(amt, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(26, 26, 26)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel11)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel2)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                                    .addComponent(txtcid, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtacctype, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtstatus))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txttailerno)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(passp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(signature, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(time)
                        .addGap(255, 255, 255)
                        .addComponent(refno, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(btnsub, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(136, 136, 136)
                .addComponent(btncan, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtcid, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtacctype, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtbal, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(signature, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(passp, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(trantype, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)
                                    .addComponent(txttailerno, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(amt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel11)
                                .addGap(5, 5, 5))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(transdate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(remark, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnsub, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btncan, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(101, 101, 101))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchActionPerformed
        // search the database via accountno
        try {
            String sql = "select * from customertable where AccountNO = ?";
            ps = con.prepareStatement(sql);
            ps.setString(1, txtsearch.getText());
            rs = ps.executeQuery();

            if (rs.next()){
                String Add1 = rs.getString("CustomerID");
                txtcid.setText(Add1);
                String Add2 = rs.getString("Name");
                txtname.setText(Add2);
                String Add3 = rs.getString("AccountType");
                txtacctype.setText(Add3);
                String Add4 = rs.getString("CustomerActiveness");
                txtstatus.setText(Add4);
                String Add5 = rs.getString("AccountBalance");
                txtbal.setText(Add5);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,ex);
            Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnsearchActionPerformed

    private void txtsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsearchKeyReleased
        // Searching the database on keyreealse
        try {
            String sql = "select * from customertable where AccountNO = ?";
            ps = con.prepareStatement(sql);
            ps.setString(1, txtsearch.getText());
            rs = ps.executeQuery();

            if (rs.next()){
                String Add1 = rs.getString("CustomerID");
                txtcid.setText(Add1);
                String Add2 = rs.getString("Name");
                txtname.setText(Add2);
                String Add3 = rs.getString("AccountType");
                txtacctype.setText(Add3);
                String Add4 = rs.getString("CustomerActiveness");
                txtstatus.setText(Add4);
                String Add5 = rs.getString("AccountBalance");
                txtbal.setText(Add5);

                byte[] img = null;
                img =  rs.getBytes("Passport");
                ImageIcon image = new ImageIcon(img);
                Image im = image.getImage();
                Image myImg = im.getScaledInstance(   passp.getWidth(),   passp.getHeight(),Image.SCALE_SMOOTH);
                ImageIcon newImage = new ImageIcon(myImg);

                passp.setIcon(newImage);

                byte[] imge = null;

                imge =  rs.getBytes("Signature");
                ImageIcon imag = new ImageIcon(imge);
                Image imm = imag.getImage();
                Image myImg2 = imm.getScaledInstance(   signature.getWidth(),   signature.getHeight(),Image.SCALE_SMOOTH);
                ImageIcon newImage2 = new ImageIcon(myImg2);

                signature.setIcon(newImage2);

            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,ex);
            Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_txtsearchKeyReleased

    private void trantypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trantypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trantypeActionPerformed

    private void btnsubMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnsubMouseEntered
        // TOD
        refno.setText(q="Ref/Withdrawal/");
    }//GEN-LAST:event_btnsubMouseEntered

    private void btnsubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsubActionPerformed
        String date = ((JTextField)transdate.getDateEditor().getUiComponent()).getText();
        String bal = txtbal.getText();

        ref =  1+ (int)(Math.random() * 1000009 );
        q += ref;
        refno.setText(q);
        int conf = JOptionPane.showConfirmDialog(this, "Is this a confirmed transaction?", "Warning", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(amt.getText().equals("")|| amt.getText().equals("0.00")||txtsearch.getText().equals("") ||transdate.getDate().equals("")|| remark.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Empty Field(s) have been detected fill up the field(s) to Proceed");
        }
        else if(trantype.getSelectedItem().equals("Select Transaction")){
            JOptionPane.showMessageDialog(this,"Select the Transaction Type from the combobox above");

        }
        //CUSTOMER SECTION
        else{//================================================================
            if(conf == JOptionPane.YES_OPTION){
                try {
                    // this will update every payment made by a customer into customertable in database(no adjustment needed)
                    String trntype = (String)trantype.getSelectedItem();
                    double Amt= Double.parseDouble(amt.getText());
                    switch(trntype){

                        case "Deposit" :
                        if(FRONTPAGE.copt.getSelectedItem()== "CUSTOMER"){

                            JOptionPane.showMessageDialog(this, "Access Denied!!You are not  allowed too perform this operation \nPlease visit our nearest branch to "
                                + "you for more Information ", "Transaction Alert", JOptionPane.WARNING_MESSAGE);
                        } else{
                            //this will remind the user to balance the daily account before the first use
                            String balsheet = "SELECT * FROM balancesheetable where Date ='"+date+"'";
                            ps = con.prepareStatement(balsheet);
                            rs = ps.executeQuery();
                            if(!rs.next()){
                            
                            JOptionPane.showMessageDialog(this, "You have not Prepared your Balance Sheet for first use \nfor the day, do that now to continue", "REMINDER", JOptionPane.INFORMATION_MESSAGE);
                   
                             //this will call the balance sheet when the user click on ok
                            Balsheet bs = new Balsheet();
                           JDesktopPane desktopPane = getDesktopPane();
                           desktopPane.add(bs);
                           bs.show();
                            }
                            else{
                                if(txttailerno.getText().equals("")){
                                JOptionPane.showMessageDialog(this,"Enter the Tailer no for this transaction");
                                }else{
                            String qry = "UPDATE `customertable` SET `AccountBalance`= (`AccountBalance`+ '"+Amt+"') WHERE AccountNO = '"+txtsearch.getText()+"' ";
                            {
                                try {
                                    ps = con.prepareStatement(qry);
                                    int n1 = ps.executeUpdate();

                                    if(n1 >0){
                                        //  JOptionPane.showMessageDialog(null,"updateadded successful");
                                    }
                                } catch (SQLException ex) {
                                    // JOptionPane.showMessageDialog(this,"Erroraddoccured");
                                    Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }

                            {

                                //TRANSACTION TABLE SECTION FOR DEPOSITS
                                //==========================================================================================

                                //this will insert every transaction into the transaction database for reference purposes

                                String sql = " INSERT INTO `transactiontable`( `CustomerID`, `AccountNo`, `CustomerName`,`ToAccountNo`,`ToAccountName` ,`AccountType`, `AccountStatus`, `Amount`, AccountBalance,  `TransactionType`, `TailerNO`, `Date`, `Remark`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(sql);

                                ps.setString (1,txtcid.getText());
                                ps.setString (2,txtsearch.getText());
                                ps.setString (3,txtname.getText());
                                ps.setString (4,"");
                                ps.setString (5,"");

                                ps.setString (6,txtacctype.getText());
                                ps.setString (7,txtstatus.getText());
                                ps.setString (8,amt.getText());
                                ps.setDouble (9,0);
                                ps.setString (10,trantype.getSelectedItem().toString());
                                //  ps.setString (11,txttailerno.getText());
                                if (trntype =="Deposit"){
                                    ps.setString(11, txttailerno.getText());

                                }
                                else if(trntype == "Withdrawal"){
                                    ps.setString(11, refno.getText());

                                }
                                ps.setString (12,date);
                                ps.setString (13,remark.getText());

                                int q = ps.executeUpdate();
                                if(q>0){

                                    JOptionPane.showMessageDialog(this,"Transaction Submitted Successfully");
                                   
                                }

                            }
                            //THIS WILL UPDATE THE TRANSACTION TABLE ONCE THE DEPOSIT TRANSACTION COMPLETES

                            String qry3 = "UPDATE `transactiontable` SET `AccountBalance`= ( '"+bal+"' + '"+Amt+"') WHERE TailerNO = '"+txttailerno.getText()+"' and Date = '"+date+"' ";
                            {
                                try {
                                    ps = con.prepareStatement(qry3);
                                    int n3 = ps.executeUpdate();

                                    if(n3 >0){
                                        //JOptionPane.showMessageDialog(null,"updateadded trans successful");
                                       
                                    }
                                } catch (SQLException ex) {
                                    JOptionPane.showMessageDialog(this,"Erroraddoccured");
                                    Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            //BALANCE SHEET SECTION FOR DEPOSIT
                            //==========================================================================================

                            //updating to Balance sheet
                            String qry8 = "UPDATE `balancesheetable` SET `TotalDeposit`=  `TotalDeposit` + '"+Amt+"' WHERE Date = '"+date+"' ";
                            {
                                try {
                                    ps = con.prepareStatement(qry8);
                                    int n3 = ps.executeUpdate();

                                    if(n3 >0){
                                        // JOptionPane.showMessageDialog(null,"updateadded trans successful");
                                        
                                    }
                                } catch (SQLException ex) {
                                    JOptionPane.showMessageDialog(this,"Erroraddoccured");
                                    Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
amt.setText("0.00");
                        }
                        }
                        
                        break;
                        // this will update every widthdrawal made by a customer into customertable in database(no adjustment needed)
                        case "Withdrawal" :
                         

                        String block = "SELECT * FROM `blockedaccountable` WHERE AccountNO = '"+txtsearch.getText()+"'";

                        try {
                            ps = con.prepareStatement(block);
                            rs = ps.executeQuery();
                            if(rs.next()){

                                JOptionPane.showMessageDialog(this, "This Account is Blocked!!!! \nPlease contact the customer care \nfor more information","Transaction Alert",JOptionPane.INFORMATION_MESSAGE);

                            }else{

                                if (FRONTPAGE.copt.getSelectedItem() == "CUSTOMER") {
                                    try{
                                        String qry1 = "select * from `customertable` where Username = '" + FRONTPAGE.txtusername.getText() + "' and PIN = '" + FRONTPAGE.txtpass.getText() + "' and AccountNO = '" + txtsearch.getText() + "' ";
                                        ps = con.prepareStatement(qry1);

                                        rs = ps.executeQuery();

                                        if (rs.next()) {

                                            //this will check the amount in the accountbalance of the customer before any transaction if the
                                            //amount inthe account is less than request insufficient fund message will appear
                                            String check = "select AccountBalance from customertable where  AccountBalance = '"+txtbal.getText()+"'";

                                            ps= con.prepareStatement(check);
                                            //ps.setString (1, txtbal.getText());
                                            rs = ps.executeQuery();
                                            while(rs.next()){
                                                double withamt = Double.parseDouble(amt.getText());
                                                int accbal;

                                                accbal = rs.getInt("AccountBalance");

                                                if(accbal < withamt){
                                                    JOptionPane.showMessageDialog(this, "Insufficient Fund","Transaction Alert",JOptionPane.INFORMATION_MESSAGE);

                                                }else{

                                                    String qry2 = "UPDATE `customertable` SET `AccountBalance`= (`AccountBalance` - '"+Amt+"') WHERE AccountNO = '"+txtsearch.getText()+"' ";
                                                    {
                                                        try {
                                                            ps = con.prepareStatement(qry2);
                                                            int n2 = ps.executeUpdate();
                                                            if(n2 >0){
                                                                //   JOptionPane.showMessageDialog(null,"update deducted successful");
                                                            }
                                                        } catch (SQLException ex) {
                                                            JOptionPane.showMessageDialog(this,"Errorddctoccured");
                                                            Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }

                                                    //TRANSACTION TABLE SECTION
                                                    //==========================================================================================

                                                    //this will insert every transaction into the transaction database for reference purposes FOR WITHDRAWAL
                                                    {
                                                        String sql = " INSERT INTO `transactiontable`( `CustomerID`, `AccountNo`, `CustomerName`,`ToAccountNo`,`ToAccountName` ,`AccountType`, `AccountStatus`, `Amount`, AccountBalance,  `TransactionType`, `TailerNO`, `Date`, `Remark`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
                                                        ps = con.prepareStatement(sql);

                                                        ps.setString (1,txtcid.getText());
                                                        ps.setString (2,txtsearch.getText());
                                                        ps.setString (3,txtname.getText());
                                                        ps.setString (4,"");
                                                        ps.setString (5,"");

                                                        ps.setString (6,txtacctype.getText());
                                                        ps.setString (7,txtstatus.getText());
                                                        ps.setString (8,amt.getText());
                                                        ps.setDouble (9,0);
                                                        ps.setString (10,trantype.getSelectedItem().toString());
                                                        //  ps.setString (11,txttailerno.getText());
                                                        if (trntype =="Deposit"){
                                                            ps.setString(11, txttailerno.getText());

                                                        }
                                                        else if(trntype == "Withdrawal"){
                                                            ps.setString(11, refno.getText());

                                                        }
                                                        ps.setString (12,date);
                                                        ps.setString (13,remark.getText());

                                                        int q = ps.executeUpdate();
                                                        if(q>0){

                                                            JOptionPane.showMessageDialog(this,"Transaction Submitted Successfully");
                                                        }

                                                    }

                                                    //THIS WILL UPDATE THE TRANSACTION TABLE ONCE THE WITHDRAWAL TRANSACTION COMPLETES
                                                    String qry4 = "UPDATE `transactiontable` SET `AccountBalance`= ( '"+bal+"' - '"+Amt+"') WHERE TailerNO = '"+refno.getText()+"' and Date = '"+date+"'";
                                                    {
                                                        try {
                                                            ps = con.prepareStatement(qry4);
                                                            int n4 = ps.executeUpdate();
                                                            if(n4 >0){
                                                                //   JOptionPane.showMessageDialog(null,"update deducted trns successful");
                                                            }
                                                        } catch (SQLException ex) {
                                                            JOptionPane.showMessageDialog(this,"Errorddctoccured");
                                                            Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }

                                                    //BALANCE SHEET SECTION FOR WITHDRAWAL
                                                    //==========================================================================================

                                                    //updating to Balance sheet

                                                    String qry9 = "UPDATE `balancesheetable` SET `TotalWithdrawal`= `TotalWithdrawal` + '"+Amt+"' WHERE  Date = '"+date+"' ";
                                                    {
                                                        try {
                                                            ps = con.prepareStatement(qry9);
                                                            int n4 = ps.executeUpdate();
                                                            if(n4 >0){
                                                                // JOptionPane.showMessageDialog(null,"update deducted trns successful");
                                                            }
                                                        } catch (SQLException ex) {
                                                            JOptionPane.showMessageDialog(this,"Errorddctoccured");
                                                            Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                        else {
                                            JOptionPane.showMessageDialog(this, "Authentication Error,Transaction could not \ncomplete due to incorrect User data");
                                        }
                                    }catch(Exception ex){
                                    }
                                }

                                else { //this will remind the user to balance the daily account before the first use
                                     String balsheet = "SELECT * FROM balancesheetable where Date ='"+date+"'";
                            ps = con.prepareStatement(balsheet);
                            rs = ps.executeQuery();
                            if(!rs.next()){
                            
                            JOptionPane.showMessageDialog(this, "You have not Prepared your Balance Sheet for first use \nfor the day, do that now to continue", "REMINDER", JOptionPane.INFORMATION_MESSAGE);
                          //this will call the balance sheet when the user click on ok
                            Balsheet bs = new Balsheet();
                           JDesktopPane desktopPane = getDesktopPane();
                           desktopPane.add(bs);
                           bs.show();              
                            }
                            else{
                                    //when it is the c that logged in then validate and carry out this operation

                                    String qry10 = "select * from `customertable` where  AccountNO = '" + txtsearch.getText() + "' ";
                                    ps = con.prepareStatement(qry10);

                                    rs = ps.executeQuery();

                                    if (rs.next()) {

                                        //this will check the amount in the accountbalance of the customer before any transaction if the
                                        //amount inthe account is less than request insufficient fund message will appear
                                        String check = "select AccountBalance from customertable where  AccountBalance = '"+txtbal.getText()+"'";

                                        ps= con.prepareStatement(check);
                                        //ps.setString (1, txtbal.getText());
                                        rs = ps.executeQuery();
                                        while(rs.next()){
                                            double withamt = Double.parseDouble(amt.getText());
                                            int accbal;

                                            accbal = rs.getInt("AccountBalance");

                                            if(accbal < withamt){
                                                JOptionPane.showMessageDialog(this, "Insufficient Fund","Transaction Alert",JOptionPane.INFORMATION_MESSAGE);

                                            }else{

                                                String qry11 = "UPDATE `customertable` SET `AccountBalance`= (`AccountBalance` - '"+Amt+"') WHERE AccountNO = '"+txtsearch.getText()+"' ";
                                                {
                                                    try {
                                                        ps = con.prepareStatement(qry11);
                                                        int n2 = ps.executeUpdate();
                                                        if(n2 >0){
                                                            //   JOptionPane.showMessageDialog(null,"update deducted successful");
                                                        }
                                                    } catch (SQLException ex) {
                                                        JOptionPane.showMessageDialog(this,"Errorddctoccured");
                                                        Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                                    }
                                                }

                                                //TRANSACTION TABLE SECTION
                                                //==========================================================================================

                                                //this will insert every transaction into the transaction database for reference purposes FOR WITHDRAWAL
                                                {
                                                    String sql2 = " INSERT INTO `transactiontable`( `CustomerID`, `AccountNo`, `CustomerName`,`ToAccountNo`,`ToAccountName` ,`AccountType`, `AccountStatus`, `Amount`, AccountBalance,  `TransactionType`, `TailerNO`, `Date`, `Remark`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
                                                    ps = con.prepareStatement(sql2);

                                                    ps.setString (1,txtcid.getText());
                                                    ps.setString (2,txtsearch.getText());
                                                    ps.setString (3,txtname.getText());
                                                    ps.setString (4,"");
                                                    ps.setString (5,"");

                                                    ps.setString (6,txtacctype.getText());
                                                    ps.setString (7,txtstatus.getText());
                                                    ps.setString (8,amt.getText());
                                                    ps.setDouble (9,0);
                                                    ps.setString (10,trantype.getSelectedItem().toString());
                                                    //  ps.setString (11,txttailerno.getText());
                                                    if (trntype =="Deposit"){
                                                        ps.setString(11, txttailerno.getText());

                                                    }
                                                    else if(trntype == "Withdrawal"){
                                                        ps.setString(11, refno.getText());

                                                    }
                                                    ps.setString (12,date);
                                                    ps.setString (13,remark.getText());

                                                    int q = ps.executeUpdate();
                                                    if(q>0){

                                                        JOptionPane.showMessageDialog(this,"Transaction Submitted Successfully");
                                                    }

                                                }

                                                //THIS WILL UPDATE THE TRANSACTION TABLE ONCE THE WITHDRAWAL TRANSACTION COMPLETES
                                                String qry13 = "UPDATE `transactiontable` SET `AccountBalance`= ( '"+bal+"' - '"+Amt+"') WHERE TailerNO = '"+refno.getText()+"' and Date = '"+date+"'";
                                                {
                                                    try {
                                                        ps = con.prepareStatement(qry13);
                                                        int n4 = ps.executeUpdate();
                                                        if(n4 >0){
                                                            //   JOptionPane.showMessageDialog(null,"update deducted trns successful");
                                                        }
                                                    } catch (SQLException ex) {
                                                        JOptionPane.showMessageDialog(this,"Errorddctoccured");
                                                        Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                                    }
                                                }

                                                //BALANCE SHEET SECTION FOR WITHDRAWAL
                                                //==========================================================================================

                                                //updating to Balance sheet

                                                String qry14 = "UPDATE `balancesheetable` SET `TotalWithdrawal`= `TotalWithdrawal` + '"+Amt+"' WHERE  Date = '"+date+"' ";
                                                {
                                                    try {
                                                        ps = con.prepareStatement(qry14);
                                                        int n4 = ps.executeUpdate();
                                                        if(n4 >0){
                                                            // JOptionPane.showMessageDialog(null,"update deducted trns successful");
                                                        }
                                                    } catch (SQLException ex) {
                                                        JOptionPane.showMessageDialog(this,"Errorddctoccured");
                                                        Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                                }

                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(transfer.class.getName()).log(Level.SEVERE, null, ex);
                        }
amt.setText("0.00");
                    }

                    //=====
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this,"Transaction Submission Failed");
                    Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);

                }

            }
        }

        //===============================================================================================

        //=================================================================================

    }//GEN-LAST:event_btnsubActionPerformed

    private void amtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amtKeyReleased
        // this will refetch the account balance of the user if he still want to perform another transaction and the former amt is deleted
        refresh();

    }//GEN-LAST:event_amtKeyReleased

    private void btncanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncanActionPerformed
        // TODO add your handlng code here:
        this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        this.hide();

    }//GEN-LAST:event_btncanActionPerformed

    private void amtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_amtFocusGained
        // TODO add your handling code here:
        amt.setText("");
    }//GEN-LAST:event_amtFocusGained

    private void txtsearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtsearchFocusGained
        // TODO add your handling code here:
       txtsearch.setText("");
    }//GEN-LAST:event_txtsearchFocusGained

    private void txttailernoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txttailernoFocusGained
        // TODO add your handling code here:
       txttailerno.setText("");
    }//GEN-LAST:event_txttailernoFocusGained

    private void remarkFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_remarkFocusGained
        // TODO add your handling code here:
        remark.setText("");
    }//GEN-LAST:event_remarkFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amt;
    private javax.swing.JButton btncan;
    private javax.swing.JButton btnsearch;
    private javax.swing.JButton btnsub;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel passp;
    private javax.swing.JLabel refno;
    private javax.swing.JTextField remark;
    private javax.swing.JLabel signature;
    private javax.swing.JLabel time;
    private com.toedter.calendar.JDateChooser transdate;
    private javax.swing.JComboBox<String> trantype;
    private javax.swing.JTextField txtacctype;
    private javax.swing.JTextField txtbal;
    private javax.swing.JTextField txtcid;
    private javax.swing.JTextField txtname;
    private javax.swing.JTextField txtsearch;
    private javax.swing.JTextField txtstatus;
    private javax.swing.JTextField txttailerno;
    // End of variables declaration//GEN-END:variables
}
