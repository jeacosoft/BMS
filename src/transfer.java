
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import static java.time.zone.ZoneRulesProvider.refresh;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author AnthonyCee
 */
public class transfer extends javax.swing.JInternalFrame {
Connection con = myconnect.getConnection();
      //Connection con = myconnect2.ConnectDb();
        PreparedStatement ps;
        ResultSet rs;
         int month,year,day;
        int hour,second,minute;
        String timestr,yearstr;
        int ref;
        String q;
    /**
     * Creates new form transfer
     */
    public transfer() {
        initComponents();
         dob.setDate(java.sql.Date.valueOf(java.time.LocalDate.now()));
        Calendar cal = Calendar.getInstance(); 
cal.getTime(); 
SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss"); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fromaccno = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnsub = new javax.swing.JButton();
        txtCid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtstatus = new javax.swing.JTextField();
        txtacctype = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtbal = new javax.swing.JTextField();
        txtcIDto = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txttoName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtaccstto = new javax.swing.JTextField();
        txtTOacctype = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtToaccno = new javax.swing.JTextField();
        btnsearchto = new javax.swing.JButton();
        btncan = new javax.swing.JButton();
        txtamt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtremark = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel15 = new javax.swing.JLabel();
        dob = new com.toedter.calendar.JDateChooser();
        time = new javax.swing.JLabel();
        refno = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("TRANSFER MASTER");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/sunlog.png"))); // NOI18N

        jLabel1.setText("From Account No");

        fromaccno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fromaccnoFocusGained(evt);
            }
        });
        fromaccno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fromaccnoKeyReleased(evt);
            }
        });

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnsub.setText("Submit");
        btnsub.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnsubMouseEntered(evt);
            }
        });
        btnsub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsubActionPerformed(evt);
            }
        });

        txtCid.setEnabled(false);

        jLabel2.setText("Customer ID");

        txtname.setEnabled(false);

        jLabel3.setText("Customer Name");

        jLabel4.setText("Account Status");

        txtstatus.setEnabled(false);

        txtacctype.setEnabled(false);

        jLabel5.setText("Account Type");

        jLabel6.setText("Account Balance");

        txtbal.setEnabled(false);

        txtcIDto.setEnabled(false);

        jLabel7.setText("Customer ID");

        txttoName.setEnabled(false);

        jLabel8.setText("Customer Name");

        jLabel9.setText("Account Statue");

        txtaccstto.setEnabled(false);

        txtTOacctype.setEnabled(false);

        jLabel10.setText("To Account No");

        jLabel11.setText("Account Type");

        txtToaccno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToaccnoFocusGained(evt);
            }
        });
        txtToaccno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtToaccnoKeyReleased(evt);
            }
        });

        btnsearchto.setText("Search");

        btncan.setText("Cancel");
        btncan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncanActionPerformed(evt);
            }
        });

        txtamt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtamtFocusGained(evt);
            }
        });
        txtamt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtamtKeyReleased(evt);
            }
        });

        jLabel13.setText("Amount");

        jLabel14.setText("Remark");

        txtremark.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtremarkFocusGained(evt);
            }
        });

        jLabel15.setText("Date");

        time.setText("Ref NO:");

        refno.setFont(new java.awt.Font("OCR-B 10 BT", 1, 11)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtacctype, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addGap(28, 28, 28)
                                .addComponent(txtstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(fromaccno)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addGap(32, 32, 32))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtCid, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addGap(28, 28, 28)
                                .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtTOacctype, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtcIDto))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel9)
                                            .addGap(196, 196, 196))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addGap(28, 28, 28)
                                            .addComponent(txttoName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addContainerGap()))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtaccstto, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap())))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtToaccno)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnsearchto)
                                .addContainerGap())))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel13))
                                .addGap(31, 31, 31)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtamt, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel15)
                                        .addGap(18, 18, 18)
                                        .addComponent(dob, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtremark)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(31, 31, 31)
                                        .addComponent(txtbal, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(time)
                                        .addGap(18, 18, 18)
                                        .addComponent(refno)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnsub, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71)
                .addComponent(btncan, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(time)
                    .addComponent(refno))
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fromaccno, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCid, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtacctype, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtbal, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(7, 7, 7)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtToaccno, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(btnsearchto, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtcIDto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttoName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(jLabel8)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTOacctype, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(jLabel9)
                        .addComponent(txtaccstto, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(dob, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                        .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtamt, javax.swing.GroupLayout.Alignment.LEADING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtremark, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btncan, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnsub, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 554, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 561, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(4, 4, 4)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    public void refresh(){
    
        String sql = "select * from customertable where AccountNO = ?";
        try {
            ps = con.prepareStatement(sql);
            ps.setString(1, fromaccno.getText());
        rs = ps.executeQuery();
        
        if (rs.next()){
            String Add1 = rs.getString("AccountBalance");
            txtbal.setText(Add1);
        }
        } catch (SQLException ex) {
            Logger.getLogger(transfer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void fromaccnoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fromaccnoKeyReleased
        // Search Database at key Release
        try {
            String sql = "select * from customertable where AccountNO = ?";
            ps = con.prepareStatement(sql);
            ps.setString(1, fromaccno.getText());
            rs = ps.executeQuery();

            if (rs.next()){
                String Add1 = rs.getString("CustomerID");
                txtCid.setText(Add1);
                String Add2 = rs.getString("Name");
                txtname.setText(Add2);
                String Add3 = rs.getString("AccountType");
                txtacctype.setText(Add3);
                String Add4 = rs.getString("CustomerActiveness");
                txtstatus.setText(Add4);
                String Add5 = rs.getString("AccountBalance");
                txtbal.setText(Add5);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,ex);
            Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_fromaccnoKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Searching database on button click

        try {
            String sql = "select * from customertable where AccountNO = ?";
            ps = con.prepareStatement(sql);
            ps.setString(1, fromaccno.getText());
            rs = ps.executeQuery();

            if (rs.next()){
                String Add1 = rs.getString("CustomerID");
                txtCid.setText(Add1);
                String Add2 = rs.getString("Name");
                txtname.setText(Add2);
                String Add3 = rs.getString("AccountType");
                txtacctype.setText(Add3);
                String Add4 = rs.getString("CustomerActiveness");
                txtstatus.setText(Add4);
                String Add5 = rs.getString("AccountBalance");
                txtbal.setText(Add5);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,ex);
            Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnsubMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnsubMouseEntered
        // refno initials
        refno.setText(q = "Ref/Traf/");
    }//GEN-LAST:event_btnsubMouseEntered

    private void btnsubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsubActionPerformed
        ref =  1+ (int)(Math.random() * 1000009 );
        q += ref;
        refno.setText(q);

        try {
            String bal =txtbal.getText();
            String Amt = txtamt.getText();
            int conf = JOptionPane.showConfirmDialog(this, "Transfer"+"\t" + ""+"N".concat(""+ Amt + "\t" + "TO" + "\t" + txtToaccno.getText()), "CONFIRMATION", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (Amt.equals("") || fromaccno.getText().equals("") || txtToaccno.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Some Information are Missing please confirmed that all the  fields are filled");

            } else if (dob.getDate().equals(null)) {
                // JOptionPane.showMessageDialog(this, "Please Select transaction date");

            }

            //this will check that no customer transfers through another person account

            if (FRONTPAGE.copt.getSelectedItem() == "CUSTOMER" ) {
                //this will check if the account has any history of crime or if the account is blocked
                String block = "SELECT * FROM `blockedaccountable` WHERE AccountNO = '"+fromaccno.getText()+"'";

                try {
                    ps = con.prepareStatement(block);
                    rs = ps.executeQuery();
                    if(rs.next()){
                        JOptionPane.showMessageDialog(this, "This Account is Blocked!!!! \nPlease contact the customer care \nfor more information","Transaction Alert",JOptionPane.INFORMATION_MESSAGE);

                    }else{

                        try {
                            String qry = "select * from `customertable` where Username = '" + FRONTPAGE.txtusername.getText() + "' and PIN = '" + FRONTPAGE.txtpass.getText() + "' and AccountNO = '" + fromaccno.getText() + "' ";
                            ps = con.prepareStatement(qry);

                            rs = ps.executeQuery();
                            String acctno;
                            // acctno = rs.getString("AccountNO");
                            //if(fromaccno.getText() == acctno){
                                if (rs.next()) {
                                    //this will check the amount in the accountbalance of the customer before any transaction if the
                                    //amount inthe account is less than request insufficient fund message will appear
                                    String check = "select AccountBalance from customertable where  AccountBalance = '"+txtbal.getText()+"'";
                                    ps= con.prepareStatement(check);
                                    //ps.setString (1, txtbal.getText());
                                    rs = ps.executeQuery();
                                    while(rs.next()){
                                        double amt = Double.parseDouble(txtamt.getText());
                                        int accbal = rs.getInt("AccountBalance");
                                        if(accbal < amt){
                                            JOptionPane.showMessageDialog(this, "Insufficient Fund","Transaction Alert",JOptionPane.INFORMATION_MESSAGE);

                                        }else{

                                            //deduct from the customer account  in the customertable
                                            try {

                                                String qry1 = "UPDATE `customertable` SET `AccountBalance`= (`AccountBalance`- '" + Amt + "') WHERE AccountNO = '" + fromaccno.getText() + "' ";
                                                ps = con.prepareStatement(qry1);
                                                int n1 = ps.executeUpdate();

                                                if (n1 > 0) {
                                                    // JOptionPane.showMessageDialog(null, "updateadded successful");
                                                }
                                            } catch (SQLException ex) {
                                                JOptionPane.showMessageDialog(this, "Erroraddoccured");
                                                Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                            //add to the beneficiary customer account in the customertable

                                            String qry2 = "UPDATE `customertable` SET `AccountBalance`= (`AccountBalance` + '" + Amt + "') WHERE AccountNO = '" + txtToaccno.getText() + "' ";
                                            {
                                                try {
                                                    ps = con.prepareStatement(qry2);
                                                    int n2 = ps.executeUpdate();
                                                    if (n2 > 0) {
                                                        // JOptionPane.showMessageDialog(null, "update deducted successful");
                                                    }
                                                } catch (SQLException ex) {
                                                    JOptionPane.showMessageDialog(this, "Errorddctoccured");
                                                    Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                                }
                                            }
                                            String date = ((JTextField) dob.getDateEditor().getUiComponent()).getText();
                                            try {

                                                //inserting the transaction into the transaction table when it is customer that login for future references

                                                String sql2 = " INSERT INTO `transactiontable`(`CustomerID`, `AccountNo`, `CustomerName`, `ToAccountNo`, `ToAccountName`, `AccountType`, `AccountStatus`, `Amount`, `AccountBalance`, `TransactionType`, `TailerNO`, `Date`, `Remark`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
                                                ps = con.prepareStatement(sql2);

                                                ps.setString(1, txtCid.getText());
                                                ps.setString(2, fromaccno.getText());
                                                ps.setString(3, txtname.getText());

                                                ps.setString(4, txtToaccno.getText());
                                                ps.setString(5, txttoName.getText());

                                                ps.setString(6, txtacctype.getText());
                                                ps.setString(7, txtstatus.getText());
                                                ps.setString(8, txtamt.getText());
                                                ps.setString(9, txtbal.getText());
                                                ps.setString(10, "Transfer");
                                                ps.setString(11,refno.getText());

                                                ps.setString(12, date);
                                                ps.setString(13, txtremark.getText());

                                                int q = ps.executeUpdate();
                                                if (q > 0) {

                                                    JOptionPane.showMessageDialog(this, "Transfer was Successful");
                                                }
                                            } catch (SQLException ex) {
                                                Logger.getLogger(transfer.class.getName()).log(Level.SEVERE, null, ex);
                                            }

                                            //updating the transaction table for future reference
                                            String qry3 = "UPDATE `transactiontable` SET `AccountBalance`= (AccountBalance - '" + Amt + "') WHERE TailerNO = '" + refno.getText()+"' and Date = '"+date+"' ";

                                            try {
                                                ps = con.prepareStatement(qry3);
                                                int n1 = ps.executeUpdate();

                                                if (n1 > 0) {
                                                    //   JOptionPane.showMessageDialog(null,"updateadded successful");
                                                }
                                            } catch (SQLException ex) {
                                                JOptionPane.showMessageDialog(this, "Erroraddoccured");
                                                Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }
                                    }
                                }
                                else {
                                    JOptionPane.showMessageDialog(this, "Authentication Error,Transaction could not \ncomplete due to incorrect User data");
                                }
                                // }else{JOptionPane.showMessageDialog(this, "error");}
                        } catch (SQLException ex) {
                            Logger.getLogger(transfer.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }

                } catch (SQLException ex) {
                    Logger.getLogger(transfer.class.getName()).log(Level.SEVERE, null, ex);
                }
                //===========================================================================================================================================
                //else if it is admin or employee then
            } //this section is meant for the admin or employee eg in bank transactiion and need not varification except account no
            else {

                if (conf == JOptionPane.YES_OPTION) {
                    String block = "SELECT * FROM `blockedaccountable` WHERE AccountNO = '"+fromaccno.getText()+"'";

                    try {
                        ps = con.prepareStatement(block);
                        rs = ps.executeQuery();
                        if(rs.next()){

                            JOptionPane.showMessageDialog(this, "This Account is Blocked!!!! \nPlease contact the customer care \nfor more information","Transaction Alert",JOptionPane.INFORMATION_MESSAGE);

                        }else{

                            try {
                                //this will check the amount in the accountbalance of the customer before any transaction if the
                                //amount inthe account is less than request insufficient fund message will appear
                                String check = "select AccountBalance from customertable where  AccountBalance = '"+txtbal.getText()+"'";
                                ps= con.prepareStatement(check);
                                //ps.setString (1, txtbal.getText());
                                rs = ps.executeQuery();
                                while(rs.next()){
                                    double amt = Double.parseDouble(txtamt.getText());
                                    int accbal = rs.getInt("AccountBalance");
                                    if(accbal < amt){
                                        JOptionPane.showMessageDialog(this, "Insufficient Fund","Transaction Alert",JOptionPane.INFORMATION_MESSAGE);

                                    }else{ // this will deduct from the customers account in customertable

                                        String qry4 = "UPDATE `customertable` SET `AccountBalance`= (`AccountBalance`- '" + Amt + "') WHERE AccountNO = '" + fromaccno.getText() + "' ";
                                        {
                                            try {
                                                ps = con.prepareStatement(qry4);
                                                int n1 = ps.executeUpdate();

                                                if (n1 > 0) {
                                                    //    JOptionPane.showMessageDialog(null,"updateadded successful");
                                                }
                                            } catch (SQLException ex) {
                                                JOptionPane.showMessageDialog(this, "Erroraddoccured");
                                                Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }

                                        //this will add to the benficiary account in the customer table
                                        String qry5 = "UPDATE `customertable` SET `AccountBalance`= (`AccountBalance` + '" + Amt + "') WHERE AccountNO = '" + txtToaccno.getText() + "' ";
                                        {
                                            try {
                                                ps = con.prepareStatement(qry5);
                                                int n2 = ps.executeUpdate();
                                                if (n2 > 0) {
                                                    //  JOptionPane.showMessageDialog(null,"update deducted successful");
                                                }
                                            } catch (SQLException ex) {
                                                JOptionPane.showMessageDialog(this, "Errorddctoccured");
                                                Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }

                                        //inserting the transaction into the transaction table when it is admin or employee that is logged in
                                        Date date2 = dob.getDate();
                                        String date = ((JTextField) dob.getDateEditor().getUiComponent()).getText();
                                        String sql2 = " INSERT INTO transactiontable(CustomerID, AccountNo, CustomerName, ToAccountNo, ToAccountName, AccountType, AccountStatus, Amount, AccountBalance, TransactionType, TailerNO, Date, Remark) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
                                        ps = con.prepareStatement(sql2);

                                        ps.setString(1, txtCid.getText());
                                        ps.setString(2, fromaccno.getText());
                                        ps.setString(3, txtname.getText());

                                        ps.setString(4, txtToaccno.getText());
                                        ps.setString(5, txttoName.getText());

                                        ps.setString(6, txtacctype.getText());
                                        ps.setString(7, txtstatus.getText());
                                        ps.setString(8, txtamt.getText());
                                        ps.setString(9, txtbal.getText());
                                        ps.setString(10, "Transfer");
                                        ps.setString(11, refno.getText());

                                        ps.setString(12, date);
                                        ps.setString(13, txtremark.getText());

                                        int q = ps.executeUpdate();
                                        if (q > 0) {

                                            JOptionPane.showMessageDialog(this, "Transfer was Successful");
                                        }

                                        //String date = ((JTextField) dob.getDateEditor().getUiComponent()).getText();
                                        //this will now validate the transaction into the transaction table by updating the record for transaction references
                                        String qry6 = "UPDATE `transactiontable` SET `AccountBalance`= (AccountBalance - '" + Amt + "') WHERE  TailerNO = '" + refno.getText() + "' and Date = '"+date+"' ";

                                        try {
                                            ps = con.prepareStatement(qry6);
                                            int n1 = ps.executeUpdate();

                                            if (n1 > 0) {
                                                //   JOptionPane.showMessageDialog(null,"updateadded successful");
                                            }
                                        } catch (SQLException ex) {
                                            JOptionPane.showMessageDialog(this, "Erroraddoccured");
                                            Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                }

                            } catch (SQLException ex) {
                                Logger.getLogger(transfer.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(transfer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }

        } catch (HeadlessException headlessException) {
        }
    }//GEN-LAST:event_btnsubActionPerformed

    private void txtToaccnoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtToaccnoKeyReleased
        // Search the database on keyrelease to
        try {
            String sql = "select * from customertable where AccountNO = ?";
            ps = con.prepareStatement(sql);
            ps.setString(1, txtToaccno.getText());
            rs = ps.executeQuery();

            if (rs.next()){
                String Add1 = rs.getString("CustomerID");
                txtcIDto.setText(Add1);
                String Add2 = rs.getString("Name");
                txttoName.setText(Add2);
                String Add3 = rs.getString("AccountType");
                txtTOacctype.setText(Add3);
                String Add4 = rs.getString("CustomerActiveness");
                txtaccstto.setText(Add4);
                String Add5 = rs.getString("AccountBalance");
               // txtbalto.setText(Add5);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,ex);
            Logger.getLogger(transaction.class.getName()).log(Level.SEVERE, null, ex);

        }

    }//GEN-LAST:event_txtToaccnoKeyReleased

    private void btncanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncanActionPerformed
        // TODO add your handling code here:
        this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        this.hide();

    }//GEN-LAST:event_btncanActionPerformed

    private void txtamtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtamtKeyReleased
        // this will refetch the account balance of the user if he still want to perform another transaction and the former amt is deleted
        refresh();
    }//GEN-LAST:event_txtamtKeyReleased

    private void fromaccnoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fromaccnoFocusGained
        // TODO add your handling code here:
        fromaccno.setText("");
    }//GEN-LAST:event_fromaccnoFocusGained

    private void txtToaccnoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToaccnoFocusGained
        // TODO add your handling code here:
      txtToaccno.setText("");
    }//GEN-LAST:event_txtToaccnoFocusGained

    private void txtamtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtamtFocusGained
        // TODO add your handling code here:
        txtamt.setText("");
    }//GEN-LAST:event_txtamtFocusGained

    private void txtremarkFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtremarkFocusGained
        // TODO add your handling code here:
       txtremark.setText("");
    }//GEN-LAST:event_txtremarkFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btncan;
    private javax.swing.JButton btnsearchto;
    private javax.swing.JButton btnsub;
    private com.toedter.calendar.JDateChooser dob;
    private javax.swing.JTextField fromaccno;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel refno;
    private javax.swing.JLabel time;
    private javax.swing.JTextField txtCid;
    private javax.swing.JTextField txtTOacctype;
    private javax.swing.JTextField txtToaccno;
    private javax.swing.JTextField txtaccstto;
    private javax.swing.JTextField txtacctype;
    private javax.swing.JTextField txtamt;
    private javax.swing.JTextField txtbal;
    private javax.swing.JTextField txtcIDto;
    private javax.swing.JTextField txtname;
    private javax.swing.JTextField txtremark;
    private javax.swing.JTextField txtstatus;
    private javax.swing.JTextField txttoName;
    // End of variables declaration//GEN-END:variables
}
